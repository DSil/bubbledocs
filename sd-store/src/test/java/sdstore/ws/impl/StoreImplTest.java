package sdstore.ws.impl;

import java.util.*;

import org.junit.*;

import pt.ulisboa.tecnico.sdis.store.ws.*; // classes generated by wsimport from WSDL

/**
 *  Test suite
 */
public class StoreImplTest {

    // static members

	private static DocUserPair pair; // pair being used
	private static String userId = "Maria";
	private static String documentId = "Ficheiro1";
	private static byte[] content; // content being used
	private static String contentString = "Ficheiro da Maria";
	
    // one-time initialization and clean-up

    @BeforeClass
    public static void oneTimeSetUp() {
    	pair = new DocUserPair();
    	pair.setDocumentId(documentId);
    	pair.setUserId(userId);
    	content = contentString.getBytes();
    }

    @AfterClass
    public static void oneTimeTearDown() {
    }


    // members

    private StoreImpl store; // class being tested

    // initialization and clean-up for each test

    @Before
    public void setUp() {
    	store = new StoreImpl();
    }

    @After
    public void tearDown() {
    }


    // Success creating file
    @Test
    public void testCreate() throws Exception {
    	store.createDoc(pair);
    }
    
    // Success storing file content
    @Test
    public void testStore() throws Exception {
    	store.createDoc(pair);
    	store.store(pair, content);
    }
    
    // Success loading file with the same content as stored
    @Test
    public void testLoad() throws Exception {
    	store.createDoc(pair);
    	store.store(pair, content);
    	byte[] result = store.load(pair);
    	Assert.assertEquals(content, result);
    }
    
    // Success listing the correct files of a certain (list has only one file)
    @Test
    public void testList() throws Exception {
    	store.createDoc(pair);
    	List<String> correctList = new ArrayList<String>();
    	correctList.add(documentId);
    	List<String> resultList = store.listDocs(userId);
    	Assert.assertEquals(correctList, resultList);
    	
    }
    
    // Fail creating a duplicate document
    @Test(expected = DocAlreadyExists_Exception.class)
    public void testDuplicateDocument() throws Exception {
    	store.createDoc(pair);
    	store.createDoc(pair);
    }
    
    // Fail requesting list of unknown user
    @Test(expected = UserDoesNotExist_Exception.class)
    public void testListUnknownUser() throws Exception {
    	store.listDocs(userId);
    }
    
    // Fail storing content on unknown user repository
    @Test(expected = UserDoesNotExist_Exception.class)
    public void testStoreUnknownUser() throws Exception {
    	store.store(pair,content);
    }
    
    // Fail storing content on unknown document
    @Test(expected = DocDoesNotExist_Exception.class)
    public void testStoreUnknownDoc() throws Exception {
    	store.createDoc(pair);
    	DocUserPair pair2 = new DocUserPair();
    	pair2.setUserId(userId);
    	pair2.setDocumentId("Ficheiro2");
    	store.store(pair2,content);
    }
    
    // Fail storing more content than the repository capacity
    @Test(expected = CapacityExceeded_Exception.class)
    public void testStoreCapacityExceeded() throws Exception {
    	store.createDoc(pair);
    	store.store(pair,new byte[1024*10+1]);
    }
    
    // Fail loading content of unknown user
    @Test(expected = UserDoesNotExist_Exception.class)
    public void testLoadUnknownUser() throws Exception {
    	store.load(pair);
    }
    
    // Fail loading content of unknown document
    @Test(expected = DocDoesNotExist_Exception.class)
    public void testLoadUnknownDoc() throws Exception {
    	store.createDoc(pair);
    	DocUserPair pair2 = new DocUserPair();
    	pair2.setUserId(userId);
    	pair2.setDocumentId("Ficheiro2");
    	store.load(pair2);
    }
    
}
