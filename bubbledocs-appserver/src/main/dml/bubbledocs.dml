package pt.tecnico.bubbledocs.domain;

enum pt.tecnico.bubbledocs.domain.PermissionType as PermissionTypeEnum;

class BubbleDocs {
	Integer SheetsID;
}

class SessionManager;

class Session {
	DateTime lastActivity;
	String ticket;
	String token;
	String key;
}

class User {
    String name;
    String password;
    String username;
    String email;
}

class Spreadsheet {
    Integer id;
    String name;
    Integer rows;
    Integer columns;
    DateTime creationDate;
}

class Permission {
    PermissionTypeEnum permission;
}

class Cell {
    Integer row;
    Integer column;
}

class Content;

class Root extends User;

class Literal extends Content {
    Integer literal;
}

class Reference extends Content;

class Function extends Content;

class BinaryFunction extends Function;

class Addition extends BinaryFunction;
class Multiplication extends BinaryFunction;
class Division extends BinaryFunction;
class Subtraction extends BinaryFunction;

relation DomainRootHasBubbleDocsApplication {
    .pt.ist.fenixframework.DomainRoot playsRole root {
        multiplicity 0..1;
    }
    BubbleDocs playsRole bubbleDocs {
        multiplicity 0..1;
    }
}

relation BubbleDocsHasSessionManager {
	BubbleDocs playsRole bubbledocs {
		multiplicity 1..1;
	}
	SessionManager playsRole sessionManager {
		multiplicity 1..1;
	}
}

relation SessionManagerHasSession {
	SessionManager playsRole sessionManager {
		multiplicity 1..1;
	}
	Session playsRole session {
		multiplicity *;
	}
}

relation SessionHasUser {
	Session playsRole session {
		multiplicity 0..1;
	}
	User playsRole user {
		multiplicity 1..1;
	}
}

relation BinaryFunctionHasArgument1 {
    BinaryFunction playsRole functionArg1 {
        multiplicity *;
    }
    Content playsRole argument1 {
        multiplicity 1..1;
    }
}

relation BinaryFunctionHasArgument2 {
    BinaryFunction playsRole functionArg2 {
        multiplicity *;
    }
    Content playsRole argument2 {
        multiplicity 1..1;
    }
}

relation ReferenceHasCell {
	Reference playsRole reference{
		multiplicity *;
	}
	Cell playsRole referencedCell {
		multiplicity 1..1;
	}
}

relation CellHasContent {
    Cell playsRole cell;
    Content playsRole content;
}

relation SpreadsheetContainsCells {
    Spreadsheet playsRole spreadsheet {
        multiplicity 1..1;
    }
    Cell playsRole cells {
        multiplicity *;
    }
}

relation SpreadsheetHasOwner {
    Spreadsheet playsRole spreadsheets {
        multiplicity *;
    }
    User playsRole owner {
        multiplicity 1..1;
    }
}

relation SpreadsheetHasPermissions {
    Spreadsheet playsRole spreadsheet {
        multiplicity 1..1;
    }
    Permission playsRole permissions {
        multiplicity *;
    }
}

relation UserHasPermissions {
    User playsRole user {
        multiplicity 1..1;
    }
    Permission playsRole permissions {
        multiplicity *;
    }
}

relation BubbleDocsContainsSpreadsheets {
    BubbleDocs playsRole bubbledocs {
        multiplicity 1..1;
    }
    Spreadsheet playsRole spreadsheets {
        multiplicity *;
    }
}

relation BubbleDocsContainsUsers {
    BubbleDocs playsRole bubbledocs {
        multiplicity 1..1;
    }
    User playsRole users {
        multiplicity *;
    }
}
