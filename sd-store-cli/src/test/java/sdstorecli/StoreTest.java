package sdstorecli;

import java.util.*;

import javax.xml.ws.BindingProvider;

import org.junit.*;

import pt.ulisboa.tecnico.sdis.store.ws.*; // classes generated by wsimport from WSDL
import sdstorecli.uddi.UDDINaming;
import static javax.xml.ws.BindingProvider.ENDPOINT_ADDRESS_PROPERTY;
import static org.junit.Assert.*;
import mockit.*;

/**
 *  Test suite
 */
public class StoreTest {

    // static members
	
    private static SDStore port;
    private static String userId = "StoreTest";
    private static String documentId = "StoreTestDoc";
    private static byte[] content;
    private static String contentString = "StoreTestDoc Content";
    private static int testNumber;

	
    // one-time initialization and clean-up

    @BeforeClass
    public static void oneTimeSetUp() throws Exception {
        SDStore_Service service = new SDStore_Service();
        port = service.getSDStoreImplPort();
        UDDINaming uddiNaming = new UDDINaming("http://localhost:8081");
        String endpointAddress = uddiNaming.lookup("sd-store");
        BindingProvider bindingProvider = (BindingProvider) port;
        Map<String, Object> requestContext = bindingProvider.getRequestContext();
        requestContext.put(ENDPOINT_ADDRESS_PROPERTY, endpointAddress);
        content = contentString.getBytes();
        testNumber = 0;
    }

    @AfterClass
    public static void oneTimeTearDown() {
    	port = null;
    }

    // members
    
    private static DocUserPair pair;

    // initialization and clean-up for each test

    @Before
    public void setUp() {
    	pair = new DocUserPair();
        pair.setDocumentId(documentId+testNumber);
        pair.setUserId(userId+testNumber);
    }

    @After
    public void tearDown() {
    	testNumber++;
    	pair = null;
    }
    
    // Success
    @Test
    public void testStore() throws Exception {
    	port.createDoc(pair);
    	port.store(pair, content);
    }
    
    // Fail - Unknown UserId
    @Test(expected = UserDoesNotExist_Exception.class)
    public void testStoreUnknownUser() throws Exception {
    	port.store(pair, content);
    }
    
    // Fail - Unknown DocumentId
    @Test(expected = DocDoesNotExist_Exception.class)
    public void testLoadDocUnknownDoc() throws Exception {
    	port.createDoc(pair);
    	pair.setDocumentId("fail");
    	port.store(pair, content);
    }
    
}
