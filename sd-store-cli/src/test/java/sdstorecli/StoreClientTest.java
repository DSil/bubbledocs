package sdstorecli;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import javax.xml.registry.JAXRException;
import javax.xml.ws.WebServiceException;

import mockit.Expectations;
import mockit.Mock;
import mockit.MockUp;
import mockit.Mocked;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import pt.ulisboa.tecnico.sdis.store.ws.DocAlreadyExists_Exception;
import pt.ulisboa.tecnico.sdis.store.ws.DocUserPair;
import pt.ulisboa.tecnico.sdis.store.ws.SDStore;
import sdstorecli.uddi.UDDINaming;

// classes generated by wsimport from WSDL

/**
 * Test suite
 */
public class StoreClientTest {

    // static members
    private static int x = 1;

    // one-time initialization and clean-up

    @BeforeClass
    public static void oneTimeSetUp() {
    }

    @AfterClass
    public static void oneTimeTearDown() {
    }

    // members
    // initialization and clean-up for each test

    @Before
    public void setUp() {
    }

    @After
    public void tearDown() {
    }

    // tests
    // assertEquals(expected, actual);

    /**
     * In this test the server is mocked to
     * simulate a communication exception.
     */
    @Test(expected = WebServiceException.class)
    public <T extends SDStore> void testMockServerException() throws Exception {

        // an "expectation block"
        // One or more invocations to mocked types, causing expectations to be recorded.
        new MockUp<T>() {
            @Mock
            void createDoc(DocUserPair docUserPair) throws DocAlreadyExists_Exception {
                throw new WebServiceException("fabricated");
            }
        };

        // Unit under test is exercised.
        StoreClient client = new StoreClient("http://localhost:8081", "sd-store");
        client.createDoc(new DocUserPair());

    }

    /**
     * In this test the server is mocked to
     * simulate a communication exception on a second call.
     */
    @Test
    public <T extends SDStore> void testMockServerExceptionOnSecondCall() throws Exception {
        
        new MockUp<T>() {
            @Mock
            void createDoc(DocUserPair docUserPair) throws DocAlreadyExists_Exception {
                if (x == 2) throw new WebServiceException("fabricated");
                x++;
            }
        };

        // Unit under test is exercised.
        StoreClient client = new StoreClient("http://localhost:8081", "sd-store");

        // first call to mocked server
        try {
            client.createDoc(new DocUserPair());
        } catch (WebServiceException e) {
            // exception is not expected
            fail();
        }

        // second call to mocked server
        try {
            client.createDoc(new DocUserPair());
            fail();
        } catch (WebServiceException e) {
            // exception is expected
            assertEquals("fabricated", e.getMessage());
        }
    }

    /**
     * In this test the server is mocked to
     * simulate a invalid Invocation Registry
     */
    @Test(expected = JAXRException.class)
    public void testMockServerExceptionRegistryInvocation(@Mocked final UDDINaming uddiNaming) throws Exception {

        // an "expectation block"
        // One or more invocations to mocked types, causing expectations to be recorded.
        new Expectations() {
            {
                new UDDINaming(anyString);
                uddiNaming.lookup(anyString);
                result = new JAXRException("fabricated");
            }
        };

        // Unit under test is exercised.
        new StoreClient("http://localhost:8081", "sd-store");

    }
}
