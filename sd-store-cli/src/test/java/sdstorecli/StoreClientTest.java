package sdstorecli;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import javax.xml.ws.WebServiceException;

import mockit.Expectations;
import mockit.Mocked;
import mockit.Verifications;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import pt.ulisboa.tecnico.sdis.store.ws.DocUserPair;
import pt.ulisboa.tecnico.sdis.store.ws.SDStore;
import pt.ulisboa.tecnico.sdis.store.ws.SDStore_Service;

// classes generated by wsimport from WSDL

/**
 * Test suite
 */
public class StoreClientTest {

    // static members

    // one-time initialization and clean-up

    @BeforeClass
    public static void oneTimeSetUp() {
    }

    @AfterClass
    public static void oneTimeTearDown() {
    }

    // members

    // initialization and clean-up for each test

    @Before
    public void setUp() {
    }

    @After
    public void tearDown() {
    }

    // tests
    // assertEquals(expected, actual);

    /**
     * In this test the server is mocked to
     * simulate a communication exception.
     */
    @Test(expected = WebServiceException.class)
    public void testMockServerException(@Mocked final SDStore_Service service, @Mocked final SDStore port) throws Exception {

        // an "expectation block"
        // One or more invocations to mocked types, causing expectations to be recorded.
        new Expectations() {
            {
                new SDStore_Service();
                service.getSDStoreImplPort();
                result = port;
                port.createDoc(new DocUserPair());
                result = new WebServiceException("fabricated");
            }
        };

        // Unit under test is exercised.
        StoreClient client = new StoreClient("http://localhost:8081", "sd-store");
        // call to mocked server
        // client.sum(1, 2); // FIXME
    }

    /**
     * In this test the server is mocked to
     * simulate a communication exception on a second call.
     */
    @Test
    public void testMockServerExceptionOnSecondCall(@Mocked final SDStore_Service service, @Mocked final SDStore port)
            throws Exception {

        // an "expectation block"
        // One or more invocations to mocked types, causing expectations to be recorded.
        new Expectations() {
            {
                new SDStore_Service();
                service.getSDStoreImplPort();
                result = port;
                port.createDoc(new DocUserPair());
                // first call to sum returns any number
                // result = anyInt; //FIXME
                // second call throws an exception
                result = new WebServiceException("fabricated");
            }
        };

        // Unit under test is exercised.
        StoreClient client = new StoreClient("http://localhost:8081", "sd-store");

        // first call to mocked server
        try {
            // client.sum(1, 2); //FIXME
        } catch (WebServiceException e) {
            // exception is not expected
            fail();
        }

        // second call to mocked server
        try {
            // client.sum(1, 2); //FIXME
            fail();
        } catch (WebServiceException e) {
            // exception is expected
            assertEquals("fabricated", e.getMessage());
        }
    }

    /**
     * In this test the server is mocked to
     * test the divide by zero exception propagation.
     */
    @Test
    public void testMockServer(@Mocked final SDStore_Service service, @Mocked final SDStore port) throws Exception {

        // an "expectation block"
        // One or more invocations to mocked types, causing expectations to be recorded.
        new Expectations() {
            {
                new SDStore_Service();
                service.getSDStoreImplPort();
                result = port;
                // port.intdiv(anyInt, anyInt); //FIXME
                // first call to intdiv returns any number
                result = anyInt;
                // second call throws an exception
                //result = new DivideByZero("fabricated", new DivideByZeroType()); //FIXME
            }
        };

        // Unit under test is exercised.
        StoreClient client = new StoreClient("http://localhost:8081", "sd-store");

        // first call to mocked server
        //client.intdiv(10, 5); //FIXME

        // second call to mocked server
        /*try {
            client.intdiv(10, 5); 
            fail();
        } catch (DivideByZero e) {
            // exception is expected
            assertEquals("fabricated", e.getMessage());
        }*///FIXME

        // a "verification block"
        // One or more invocations to mocked types, causing expectations to be verified.
        new Verifications() {
            {
                // Verifies that zero or one invocations occurred, with the specified argument value:
                //port.intdiv(anyInt, anyInt); //FIXME
                maxTimes = 2;
            }
        };
    }

}
